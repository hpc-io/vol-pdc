#------------------------------------------------------------------------------
# Include source and build directories
#------------------------------------------------------------------------------
set(HDF5_VOL_PDC_BUILD_INCLUDE_DEPENDENCIES
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
)

#------------------------------------------------------------------------------
# Internal dependencies (exported libs)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# External dependencies
#------------------------------------------------------------------------------
#HDF5
option(HDF5_VOL_PDC_USE_SYSTEM_HDF5 "Use system-installed HDF5." ON)
  if(HDF5_VOL_PDC_USE_SYSTEM_HDF5)
  find_package(HDF5 1.14 NO_MODULE NAMES hdf5 COMPONENTS C shared)
  if(HDF5_FOUND)
    set(HDF5_C_SHARED_LIBRARY hdf5-shared)
#    if(NOT TARGET ${HDF5_C_SHARED_LIBRARY})
#      message(FATAL_ERROR "Could not find hdf5 shared target, please make "
#"sure that HDF5 has ben compiled with shared libraries enabled.")
#    endif()
    set(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES
        ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
        ${HDF5_INCLUDE_DIR}
      )
    set(HDF5_VOL_PDC_EXT_PKG_DEPENDENCIES
      ${HDF5_VOL_PDC_EXT_PKG_DEPENDENCIES}
      ${HDF5_C_SHARED_LIBRARY}
    )
  else()
    # Allow for HDF5 autotools builds
    find_package(HDF5 1.14 MODULE REQUIRED)
    if(HDF5_FOUND)
      set(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES
        ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
        ${HDF5_INCLUDE_DIRS}
      )
      set(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES
        ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES}
        ${HDF5_LIBRARIES}
      )
    else()
      message(FATAL_ERROR "Could not find HDF5, please check HDF5_DIR.")
    endif()
  endif()
endif()

find_package(PDC REQUIRED CONFIG)
if(PDC_FOUND)
  set(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES
    ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
    ${PDC_INCLUDE_DIR}
  )
  set(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES
    ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES}
    pdc
  )
else()
  message(FATAL_ERROR "Could not find pdc.")
endif()

find_package(MERCURY REQUIRED CONFIG)
#include_directories(/Users/kmu/Research/PDC/tools/mercury/include)
if(MERCURY_FOUND)
  set(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES
    ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
    ${MERCURY_INCLUDE_DIR}
  )
  set(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES
    ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES}
    mercury
  )
else()
  message(FATAL_ERROR "Could not find mercury.")
endif()

# MPI
# Temporary workaround because HDF5 does not pull MPI dependency
option(HDF5_VOL_PDC_ENABLE_MPI "Enable MPI." ON)
if(HDF5_VOL_PDC_ENABLE_MPI)
  find_package(MPI REQUIRED)
  if(MPI_FOUND)
    set(ENABLE_MPI 1)
    set(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES
      ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
      ${MPI_INCLUDE_PATH}
    )
    set(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES
      ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES}
      ${MPI_LIBRARIES}
    )
  else()
    message(FATAL_ERROR "Could not find MPI.")
  endif()
endif()

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
# Set unique vars used in the autogenerated config file (symbol import/export)
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/H5VLpdc_config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/H5VLpdc_config.h
)

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
set(HDF5_VOL_PDC_SRCS
  ${CMAKE_CURRENT_SOURCE_DIR}/H5VLpdc.c
)

#------------------------------------------------------------------------------
# Libraries
#------------------------------------------------------------------------------
# Clean up system include path first
foreach(item ${HDF5_VOL_PDC_SYSTEM_INCLUDE_PATH})
  if(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES)
    list(REMOVE_ITEM HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES ${item})
  endif()
endforeach()

# HDF5 PDC
add_library(hdf5_vol_pdc ${HDF5_VOL_PDC_SRCS})
target_include_directories(hdf5_vol_pdc
  PUBLIC  "$<BUILD_INTERFACE:${HDF5_VOL_PDC_BUILD_INCLUDE_DEPENDENCIES}>"
          $<INSTALL_INTERFACE:${HDF5_VOL_PDC_INSTALL_INCLUDE_INTERFACE}>
)
target_include_directories(hdf5_vol_pdc
  SYSTEM PUBLIC ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
)
target_link_libraries(hdf5_vol_pdc
  ${HDF5_VOL_PDC_EXPORTED_LIBS}
  ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES}
  ${HDF5_VOL_PDC_EXT_PKG_DEPENDENCIES}
  )

hdf5_vol_pdc_set_lib_options(hdf5_vol_pdc "hdf5_vol_pdc" ${HDF5_VOL_PDC_LIBTYPE})

set(HDF5_VOL_PDC_EXPORTED_LIBS hdf5_vol_pdc ${HDF5_VOL_PDC_EXPORTED_LIBS})

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
set(HDF5_VOL_PDC_HEADERS
  ${CMAKE_CURRENT_BINARY_DIR}/H5VLpdc_config.h
  ${CMAKE_CURRENT_SOURCE_DIR}/H5VLpdc_public.h
)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  FILES
    ${HDF5_VOL_PDC_HEADERS}
  DESTINATION
    ${HDF5_VOL_PDC_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  TARGETS
    hdf5_vol_pdc
  EXPORT
    ${HDF5_VOL_PDC_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${HDF5_VOL_PDC_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${HDF5_VOL_PDC_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${HDF5_VOL_PDC_INSTALL_BIN_DIR}
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
install(
  EXPORT
    ${HDF5_VOL_PDC_EXPORTED_TARGETS}
  DESTINATION
    ${HDF5_VOL_PDC_INSTALL_DATA_DIR}/cmake/hdf5_vol_pdc
  FILE
    ${HDF5_VOL_PDC_EXPORTED_TARGETS}.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
if(NOT HDF5_VOL_PDC_EXTERNALLY_CONFIGURED)
  export(
    TARGETS
      ${HDF5_VOL_PDC_EXPORTED_LIBS}
    FILE
      ${HDF5_VOL_PDC_EXPORTED_TARGETS}.cmake
  )
endif()

#------------------------------------------------------------------------------
# Set variables for parent scope
#------------------------------------------------------------------------------

# Pkg-config configuration
if(CMAKE_BUILD_TYPE)
  string(TOLOWER ${CMAKE_BUILD_TYPE} lower_cmake_build_type)
endif()

# HDF5 PDC package dependencies
foreach(pkg_dep ${HDF5_VOL_PDC_EXT_PKG_DEPENDENCIES})
  set(HDF5_VOL_PDC_PKG_DEPENDENCIES "${HDF5_VOL_PDC_PKG_DEPENDENCIES} ${pkg_dep}")
endforeach()
set(HDF5_VOL_PDC_PKG_DEPENDENCIES ${HDF5_VOL_PDC_PKG_DEPENDENCIES} PARENT_SCOPE)

# HDF5 PDC private library dependencies
foreach(exported_lib ${HDF5_VOL_PDC_EXPORTED_LIBS})
  if(lower_cmake_build_type MATCHES "debug")
    get_target_property(HDF5_VOL_PDC_LIBRARY ${exported_lib} DEBUG_OUTPUT_NAME)
  else()
    get_target_property(HDF5_VOL_PDC_LIBRARY ${exported_lib} RELEASE_OUTPUT_NAME)
  endif()
  set(HDF5_VOL_PDC_LIBRARIES "${HDF5_VOL_PDC_LIBRARIES} -l${HDF5_VOL_PDC_LIBRARY}")
endforeach()
set(HDF5_VOL_PDC_LIBRARIES ${HDF5_VOL_PDC_LIBRARIES} PARENT_SCOPE)

# HDF5 PDC external library dependencies
# Need to generate -llib if not already passed
set(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES
  ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES}
  ${HDF5_VOL_PDC_EXT_PKG_LIB_DEPENDENCIES}
)
foreach(lib_dep ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES})
  # get library name
  get_filename_component(lib_name ${lib_dep} NAME_WE)
  if(lib_name MATCHES "^-l")
    # lib_name found is -lxxx
    set(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES_LIST ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES_LIST} ${lib_name})
  else()
    # lib_name is /path/to/lib so get library path and name
    get_filename_component(lib_path ${lib_dep} PATH)
    string(REGEX REPLACE "^lib" "" lib_name ${lib_name})
    set(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES_LIST ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES_LIST} -L${lib_path} -l${lib_name})
  endif()
endforeach()
if(HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES_LIST)
  list(REMOVE_DUPLICATES HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES_LIST)
endif()
foreach(lib_dep ${HDF5_VOL_PDC_EXT_LIB_DEPENDENCIES_LIST})
  set(HDF5_VOL_PDC_LIB_DEPENDENCIES "${HDF5_VOL_PDC_LIB_DEPENDENCIES} ${lib_dep}")
endforeach()
set(HDF5_VOL_PDC_LIB_DEPENDENCIES ${HDF5_VOL_PDC_LIB_DEPENDENCIES} PARENT_SCOPE)

# External include dependencies
set(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES
  ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
  ${HDF5_VOL_PDC_EXT_PKG_INCLUDE_DEPENDENCIES}
)
if(HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES)
  list(REMOVE_DUPLICATES HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES)
endif()
foreach(inc_dep ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES})
  set(HDF5_VOL_PDC_INCLUDE_DEPENDENCIES "${HDF5_VOL_PDC_INCLUDE_DEPENDENCIES} -I${inc_dep}")
endforeach()
set(HDF5_VOL_PDC_INCLUDE_DEPENDENCIES ${HDF5_VOL_PDC_INCLUDE_DEPENDENCIES} PARENT_SCOPE)

set(HDF5_VOL_PDC_INCLUDES_BUILD_TIME
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

set(HDF5_VOL_PDC_INCLUDES_INSTALL_TIME
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${HDF5_VOL_PDC_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)
